// Generated by view binder compiler. Do not edit!
package com.example.cyclingclub.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cyclingclub.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EventUpdateUsersBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnAddEventUser;

  @NonNull
  public final Button btnBackToUpdate;

  @NonNull
  public final Button btnDeleteEventUser;

  @NonNull
  public final EditText editTextUsername;

  @NonNull
  public final ListView userListView;

  private EventUpdateUsersBinding(@NonNull LinearLayout rootView, @NonNull Button btnAddEventUser,
      @NonNull Button btnBackToUpdate, @NonNull Button btnDeleteEventUser,
      @NonNull EditText editTextUsername, @NonNull ListView userListView) {
    this.rootView = rootView;
    this.btnAddEventUser = btnAddEventUser;
    this.btnBackToUpdate = btnBackToUpdate;
    this.btnDeleteEventUser = btnDeleteEventUser;
    this.editTextUsername = editTextUsername;
    this.userListView = userListView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EventUpdateUsersBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EventUpdateUsersBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.event_update_users, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EventUpdateUsersBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAddEventUser;
      Button btnAddEventUser = ViewBindings.findChildViewById(rootView, id);
      if (btnAddEventUser == null) {
        break missingId;
      }

      id = R.id.btnBackToUpdate;
      Button btnBackToUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnBackToUpdate == null) {
        break missingId;
      }

      id = R.id.btnDeleteEventUser;
      Button btnDeleteEventUser = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteEventUser == null) {
        break missingId;
      }

      id = R.id.editTextUsername;
      EditText editTextUsername = ViewBindings.findChildViewById(rootView, id);
      if (editTextUsername == null) {
        break missingId;
      }

      id = R.id.userListView;
      ListView userListView = ViewBindings.findChildViewById(rootView, id);
      if (userListView == null) {
        break missingId;
      }

      return new EventUpdateUsersBinding((LinearLayout) rootView, btnAddEventUser, btnBackToUpdate,
          btnDeleteEventUser, editTextUsername, userListView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
