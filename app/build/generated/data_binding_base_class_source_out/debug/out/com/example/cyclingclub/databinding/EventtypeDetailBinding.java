// Generated by view binder compiler. Do not edit!
package com.example.cyclingclub.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cyclingclub.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EventtypeDetailBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button buttonDelete;

  @NonNull
  public final Button buttonUpdate;

  @NonNull
  public final EditText editEventTypeDetail;

  @NonNull
  public final EditText eventTypeNameUpdate;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView textView2;

  private EventtypeDetailBinding(@NonNull RelativeLayout rootView, @NonNull Button buttonDelete,
      @NonNull Button buttonUpdate, @NonNull EditText editEventTypeDetail,
      @NonNull EditText eventTypeNameUpdate, @NonNull TextView textView,
      @NonNull TextView textView2) {
    this.rootView = rootView;
    this.buttonDelete = buttonDelete;
    this.buttonUpdate = buttonUpdate;
    this.editEventTypeDetail = editEventTypeDetail;
    this.eventTypeNameUpdate = eventTypeNameUpdate;
    this.textView = textView;
    this.textView2 = textView2;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EventtypeDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EventtypeDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.eventtype_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EventtypeDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDelete;
      Button buttonDelete = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.buttonUpdate;
      Button buttonUpdate = ViewBindings.findChildViewById(rootView, id);
      if (buttonUpdate == null) {
        break missingId;
      }

      id = R.id.editEventTypeDetail;
      EditText editEventTypeDetail = ViewBindings.findChildViewById(rootView, id);
      if (editEventTypeDetail == null) {
        break missingId;
      }

      id = R.id.eventTypeNameUpdate;
      EditText eventTypeNameUpdate = ViewBindings.findChildViewById(rootView, id);
      if (eventTypeNameUpdate == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.textView2;
      TextView textView2 = ViewBindings.findChildViewById(rootView, id);
      if (textView2 == null) {
        break missingId;
      }

      return new EventtypeDetailBinding((RelativeLayout) rootView, buttonDelete, buttonUpdate,
          editEventTypeDetail, eventTypeNameUpdate, textView, textView2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
